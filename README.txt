Η εργασια αποτελειται από τα εξης αρχεια:
Brecommendation.cpp Brecommendation.h
classes.cpp classes.h
distance.cpp distance.h
hash.cpp hash.h
LSHClustering.cpp LSHClustering.h
main.cpp
preprocess.cpp preprocess.h
recommendation.cpp recommendation.h
search.cpp search.h
tweet_analyzation.cpp tweet_analyzation.h
Makefile
Και έναν φακελο InputFiles με τα αρχεια εισοδου .
Επιπλεον δινεται ένα παραδειγμα αρχειου εξοδου(.txt) για κάθε έναν από τους 2 αλγοριθμους Recommendation.
Η μεταγλωττιση του προγραμματος γινεται με τη χρηση του Makefile, πληκτρολογωντας στο terminal τη λεξη make, το οποιο δημιουργει όλα τα απαραιτητα αρχεια.
Για την εκτελεση του προγραμματος, ο χρηστης πρεπει να δωσει τα ορισματα στη γραμμη εντολων για την επιτυχη εκτελεση του προγραμματος, πχ
./recommendation –d <input file> -o <output file>
Η εργασια αναπτυχθηκε σε περιβαλλον Linux, σε γλωσσα C++.
ΓΕΝΙΚΑ ΓΙΑ ΤΗΝ ΕΡΓΑΣΙΑ
Η εργασια αποτελειται από 4 βασικους αλγοριθμους, οι οποιοι μισοι υλοποιουν το Cosine LSH Recommendation(Α και Β) και οι αλλοι μισοι το Clustering Recommendation(Α και Β).
Αρχικα, πριν την εκτελεση των παραπανω αλγοριθμων, αφου διαβασουμε τα δεδομενα από τα απαραιτητα αρχεια εισοδου, δημιουργουμε τα διανυσματα χρηστων και τα κανονικοποιουμε.Επισης 
κραταμε και τα κρυπτονομισματα στα οποια εχει αναφερθει ο κάθε χρηστης.Αυτα τα δεδομενα θα χρησιμοποιησουμε στους αλγοριθμους που προαναφεραμε στην αρχη.
Για τη δημιουργια των διανυσματων των χρηστων, εχουμε λαβει υποψην τα tweets του κάθε χρηστη.Για κάθε tweet, ψαχνουμε την κάθε λεξη του στο λεξικο μας για να βρουμε το συναισθημα
της λεξης.Αν η λεξη υπαρχει στο λεξικο παιρνουμε το συναισθημα της, αλλιως αν δεν υπαρχει , το συναισθημα της λεξης το θετουμε στο 0 και ελεγχουμε αν λεξη είναι καποιο κρυπτονομισμα
 για να το κρατησουμε.Το συναισθημα του tweet είναι το αθροισμα των συναισθηματων των λεξεων του.Ετσι δημιουργουμε τα διανυσματα χρηστων, τα οποια κανονικοποιουμε στην συνεχεια.Συμφωνα
 με αυτά, εχουμε για κάθε κανονικοποιημενο διανυσμα χρηστη και τα κρυπτονομισματα στα οποια εχει αναφερθει ο κάθε χρηστης, ώστε η υποδειξη των κρυπτονομισματων να γινει με βαση αυτά τα
 κρυπτονομισμτα στα οποια ο χρηστης δεν εχει αναφερθει πρωτυτερα.
Επισης για κάθε έναν από τους 2 τροπους Recommendation, εχουμε βρει και τους εικονικους χρηστες των συσταδων που εχουν προκυψει από τα δεδομενα της 2ης εργασιας, με τη χρηση του αλγοριθμου
 συσταδοποιησης I1A1U1, καθως από τη 2η εργασια προεκυψε ότι είναι γρηγορος αλγοριθμος και βγαζει καλα αποτελεσματα συσταδοποιησης.
Τα παραπανω δεδομενα τα χρησιμοποιουμε όλα όπως οριζει η εκφωνηση, για κάθε ένα από τους αλγοριθμους Recommendation(Α και Β).